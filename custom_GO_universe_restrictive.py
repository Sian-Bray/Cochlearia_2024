# Takes a 1-2-1 gene annotation generated by 1-1_annotation.py, and creates a TopGO custom universe file
# The text file format required by the readMappings function is very simple. It consists of one line for each gene with the following syntax:
	# gene_ID<TAB>GO_ID1, GO_ID2, GO_ID3, ....

# example command:
	# python3 /Users/sian_bray/Dropbox/Scripts/custom_GO_universe_restrictive.py -i /Users/sian_bray/Dropbox/Bray/000_Research/Cochlearia_Massive/01_Data/Cochlearia_Thaliana_1-2-1_annotation.tsv -o /Users/sian_bray/Dropbox/Bray/000_Research/Cochlearia_Massive/01_Data/Cochlearia_Thaliana_GO_universe_restrictive.tsv -og /Users/sian_bray/Dropbox/Bray/000_Research/Cochlearia_Massive/01_Data/gene_association.tair
	# python3 /Users/sian_bray/Dropbox/Scripts/custom_GO_universe_restrictive.py -i /Users/sian_bray/Dropbox/Bray/000_Research/Cochlearia_Massive/01_Data/Cochlearia_Thaliana_1-2-1_annotation.tsv -o /Users/sian_bray/Dropbox/Bray/000_Research/Cochlearia_Massive/01_Data/Cochlearia_Thaliana_GO_universe_restrictive.tsv -og /Users/sian_bray/Dropbox/Bray/000_Research/Cochlearia_Massive/01_Data/gene_association.tair

import argparse

# User input
parser = argparse.ArgumentParser(description="Figures out the best student-project combos.")
parser.add_argument('-i', type=str,  metavar='input_file', required=True, help='1-2-1 gene annotation file generated by 1-1_annotation.py."')
parser.add_argument('-o', type=str,  metavar='output_file', required=True, help='Path to the output file.')
parser.add_argument('-og', type=str,  metavar='input_rbh_list', required=True, help='OG annotation file for the model organism (e.g. A. thaliana.')
args = parser.parse_args()

input_file = open(args.i, 'r')
output_file = open(args.o, 'w')
genes_read = {} # A dictionray to keep track of the unique names, for each gene the key is the gene and the value is the number to append next.
to_write = ''

for line in input_file:
	line = line.split('\t')

	# Restrictive bit! Options for combos are: 'NA', '1-2-1 orthogroup', 'within orthogroup RBH', 'within orthogroup BLAST', 'no orthogroup RBH', 'no orthogroup BLAST', 'no hit of any kind!'
	if (line[2] == '1-2-1 orthogroup\n') or (line[2] == 'within orthogroup RBH\n') or (line[2] == 'within orthogroup BLAST\n') or (line[2] == 'no orthogroup RBH\n'):

		target_gene = line[0] # i.e. Cochlearia gene
		model_gene = line[1] # i.e. thaliana gene
		model_gene = model_gene.split('.') # get rid of '.1', '.2', etc
		model_gene = model_gene[0]
		og_file = open(args.og, 'r')
		output_file.write(target_gene+'\t')
		for OG in og_file:
			if OG[0] != '!':
				OG = OG.replace('\n', '')
				OG = OG.split('\t')
				if model_gene == OG[1]:
					to_write = to_write+OG[4]+','
		to_write = to_write+'\n'
		to_write = to_write.replace(',\n', '\n')
		output_file.write(to_write)
		to_write = ''

	else:
		output_file.write(f'{line[0]}\t\n')

